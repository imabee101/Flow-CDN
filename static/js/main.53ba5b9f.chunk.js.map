{"version":3,"sources":["components/Navbar.js","components/Home.js","components/Products.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["navLinks","map","section","react_default","a","createElement","class","react_router_dom","to","toUpperCase","Navbar","src","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Home","className","Products","Contact","App","components_Navbar","react_router","exact","path","component","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.53ba5b9f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\nvar sections = ['products', 'contact' ];\r\n\r\n\r\n    var navLinks = sections.map( section => {\r\n      return (\r\n        <li class=\"nav-item\"><a class=\"nav-link\"><Link to={'/' + section } >{section.toUpperCase()}</Link></a></li>\r\n      )\r\n\r\n      });\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <a class=\"navbar-brand\"><Link to=\"/\"><img src=\"/assets/images/logo-nav-192x96.png\" alt=\"Logo\"></img></Link></a>\r\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav ml-auto\">\r\n            <li class=\"nav-item\"><a class=\"nav-link\"><Link to=\"/\">HOME</Link></a></li>\r\n            {navLinks}\r\n            \r\n\r\n            </ul>\r\n            </div>\r\n\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"container\">\r\n        <h4 className=\"center\">Home</h4>\r\n        <p>This is the home page!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\r\n\r\nconst Products = () => {\r\n    return (\r\n        <div className=\"container\">\r\n        <h4 className=\"center\">Products</h4>\r\n        <p>This is the Products page!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Products","import React from 'react';\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <div className=\"container\">\r\n        <h4 className=\"center\">Contact</h4>\r\n        <p>This is the Contact page!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Products from './components/Products';\nimport Contact from './components/Contact';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Route exact path='/' component={Home} />\n          <Route path= '/Products' component={Products} />\n          <Route path= '/Contact' component={Contact} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}